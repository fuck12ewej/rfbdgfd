import random
import string
import telebot
import json
import os
from telebot import types

API_TOKEN = "7735484805:AAEUOQkhFN0aSCPUGXXNbEObVRwqorca434"  # –ó–∞–º–µ–Ω–∏—Ç–µ –Ω–∞ –≤–∞—à —Ä–µ–∞–ª—å–Ω—ã–π —Ç–æ–∫–µ–Ω
bot = telebot.TeleBot(API_TOKEN)

# –ü—É—Ç—å –∫ —Ñ–∞–π–ª—É –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏
CONFIG_FILE = "config.json"

# –ó–∞–≥—Ä—É–∂–∞–µ–º –∏–ª–∏ —Å–æ–∑–¥–∞–µ–º –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é
def load_config():
    if os.path.exists(CONFIG_FILE):
        try:
            with open(CONFIG_FILE, "r", encoding="utf-8") as f:
                return json.load(f)
        except Exception as e:
            print(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏: {e}")
    return {"user_profiles": {}}

def save_config(config):
    try:
        with open(CONFIG_FILE, "w", encoding="utf-8") as f:
            json.dump(config, f, ensure_ascii=False, indent=4)
        print("–ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è —É—Å–ø–µ—à–Ω–æ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∞.")
    except Exception as e:
        print(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏: {e}")

# –ó–∞–≥—Ä—É–∑–∫–∞ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏
config = load_config()
user_profiles = config.get("user_profiles", {})

# –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –¥–∞–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
def generate_promo_code():
    return ''.join(random.choices(string.ascii_letters + string.digits, k=6))

def generate_secret_id():
    return ''.join(random.choices(string.ascii_letters + string.digits, k=8))

# –°–æ–∑–¥–∞–Ω–∏–µ –∏–ª–∏ –ø–æ–ª—É—á–µ–Ω–∏–µ –ø—Ä–æ—Ñ–∏–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
def get_or_create_user_profile(user_id):
    user_id_str = str(user_id)
    if user_id_str not in user_profiles:
        user_profiles[user_id_str] = {
            "secret_id": generate_secret_id(),
            "balance": 0,
            "total_profit": 0,
            "transactions": 0,
            "refunds": 0,
            "monthly_profit": 0,
            "last_profit_date": "0",
            "promo_code": generate_promo_code()
        }
        save_config({"user_profiles": user_profiles})  # –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –Ω–æ–≤–æ–π –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏
    return user_profiles[user_id_str]

# –ö–ª–∞–≤–∏–∞—Ç—É—Ä—ã
def main_menu_keyboard():
    markup = types.ReplyKeyboardMarkup(resize_keyboard=True, row_width=2)
    markup.add("üë§ –ü—Ä–æ—Ñ–∏–ª—å", "üèÖ –¢–æ–ø –≤–æ—Ä–∫–µ—Ä–æ–≤", "üìå –ù–∞–≤–∏–≥–∞—Ü–∏—è", "üîó –°—Å—ã–ª–∫–∏")
    return markup

def navigation_keyboard():
    markup = types.ReplyKeyboardMarkup(resize_keyboard=True, row_width=2)
    markup.add("üìï –ú–∞–Ω—É–∞–ª —Å–ª–µ–Ω–≥–∞ —Å–∫–∞–º–µ—Ä–∞", "üìï –û–±—è–∑–∞—Ç–µ–ª—å–Ω—ã–π –º–∞–Ω—É–∞–ª –¥–ª—è –Ω–æ–≤–∏—á–∫–æ–≤", "–ù–∞–∑–∞–¥")
    return markup

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏
@bot.message_handler(commands=['start'])
def start(message):
    user_id = message.from_user.id
    get_or_create_user_profile(user_id)
    bot.send_message(user_id, "–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å! –í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:", reply_markup=main_menu_keyboard())

@bot.message_handler(func=lambda message: message.text == "üë§ –ü—Ä–æ—Ñ–∏–ª—å")
def profile(message):
    user_id = message.from_user.id
    profile = get_or_create_user_profile(user_id)
    bot.send_message(
        user_id,
        f"üë§ –í–∞—à –ø—Ä–æ—Ñ–∏–ª—å:\n"
        f"‚ò†Ô∏è SecretID: {profile['secret_id']}\n"
        f"üí∞ –ë–∞–ª–∞–Ω—Å: {profile['balance']} —Ä—É–±.\n"
        f"üí∞ –û–±—â–∏–π –¥–æ—Ö–æ–¥: {profile['total_profit']} —Ä—É–±.\n"
        f"üíé –ü—Ä–æ–º–æ–∫–æ–¥: {profile['promo_code']}\n"
        f"üìÖ –ü–æ—Å–ª–µ–¥–Ω–∏–π –ø—Ä–æ—Ñ–∏—Ç: {profile['last_profit_date']}",
        reply_markup=main_menu_keyboard()  # –î–æ–±–∞–≤–∏–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –ø–æ—Å–ª–µ –≤—ã–≤–æ–¥–∞ –ø—Ä–æ—Ñ–∏–ª—è
    )

@bot.message_handler(func=lambda message: message.text == "üèÖ –¢–æ–ø –≤–æ—Ä–∫–µ—Ä–æ–≤")
def top_workers(message):
    if not user_profiles:
        bot.send_message(message.chat.id, "–¢–æ–ø –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –ø–æ–∫–∞ –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω.", reply_markup=main_menu_keyboard())
        return
    
    top_profiles = sorted(user_profiles.items(), key=lambda x: x[1]['total_profit'], reverse=True)
    top_3 = top_profiles[:3]
    top_message = "üèÖ –¢–æ–ø –≤–æ—Ä–∫–µ—Ä–æ–≤:\n"
    
    for i, (user_id, profile) in enumerate(top_3, 1):
        username = bot.get_chat(user_id).username if bot.get_chat(user_id).username else "–ë–µ–∑_–Ω–∏–∫–∞"
        top_message += f"\n#{i} - @{username} - {profile['total_profit']} —Ä—É–±."
    
    bot.send_message(message.chat.id, top_message, reply_markup=main_menu_keyboard())

@bot.message_handler(func=lambda message: message.text == "üìå –ù–∞–≤–∏–≥–∞—Ü–∏—è")
def navigation(message):
    bot.send_message(
        message.chat.id,
        "üìå –ù–∞–≤–∏–≥–∞—Ü–∏—è –ø–æ —Ñ—É–Ω–∫—Ü–∏—è–º:",
        reply_markup=navigation_keyboard()
    )

@bot.message_handler(func=lambda message: message.text == "üìï –ú–∞–Ω—É–∞–ª —Å–ª–µ–Ω–≥–∞ —Å–∫–∞–º–µ—Ä–∞")
def send_scam_slanga_manual(message):
    try:
        with open('slang_manual.txt', 'rb') as manual_file:
            bot.send_document(message.chat.id, manual_file)
    except FileNotFoundError:
        bot.send_message(message.chat.id, "–ò–∑–≤–∏–Ω–∏—Ç–µ, —Ñ–∞–π–ª slang_manual.txt –Ω–µ –Ω–∞–π–¥–µ–Ω. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ–±—Ä–∞—Ç–∏—Ç–µ—Å—å –∫ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É.")

@bot.message_handler(func=lambda message: message.text == "üìï –û–±—è–∑–∞—Ç–µ–ª—å–Ω—ã–π –º–∞–Ω—É–∞–ª –¥–ª—è –Ω–æ–≤–∏—á–∫–æ–≤")
def send_manual(message):
    try:
        with open('manual.txt', 'rb') as manual_file:
            bot.send_document(message.chat.id, manual_file)
    except FileNotFoundError:
        bot.send_message(message.chat.id, "–ò–∑–≤–∏–Ω–∏—Ç–µ, —Ñ–∞–π–ª gg.txt –Ω–µ –Ω–∞–π–¥–µ–Ω. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ–±—Ä–∞—Ç–∏—Ç–µ—Å—å –∫ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É.")

@bot.message_handler(func=lambda message: message.text == "üîó –°—Å—ã–ª–∫–∏")
def links(message):
    bot.send_message(
        message.chat.id,
        "üîó –°—Å—ã–ª–∫–∏:\n"
        "üë©‚Äçüíª –°–∞–π—Ç –¥–ª—è –≤–æ—Ä–∫–∞ - http://kinoroom.great-site.net"
        "                             üíé–ì–µ–Ω–µ—Ä–∞—Ç–æ—Ä —Å—Å—ã–ª–∫–∏ - your_link_generator_url_here",
        reply_markup=main_menu_keyboard()
    )

@bot.message_handler(func=lambda message: message.text == "–ù–∞–∑–∞–¥")
def back_to_main_menu(message):
    bot.send_message(
        message.chat.id,
        "–í—ã –≤–µ—Ä–Ω—É–ª–∏—Å—å –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é.",
        reply_markup=main_menu_keyboard()
    )

# –ü—Ä–∏–º–µ—Ä –∫–æ–º–∞–Ω–¥—ã –¥–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –ø—Ä–æ—Ñ–∏–ª—è
@bot.message_handler(func=lambda message: message.text.startswith("–û–±–Ω–æ–≤–∏—Ç—å –ø—Ä–∏–±—ã–ª—å"))
def update_profit(message):
    try:
        profit_amount = int(message.text.split()[2])  # –ø—Ä–µ–¥–ø–æ–ª–∞–≥–∞–µ–º, —á—Ç–æ —Ç–µ–∫—Å—Ç –±—É–¥–µ—Ç –≤ —Ñ–æ—Ä–º–∞—Ç–µ "–û–±–Ω–æ–≤–∏—Ç—å –ø—Ä–∏–±—ã–ª—å 5000"
        user_id = message.from_user.id
        profile = get_or_create_user_profile(user_id)
        profile['total_profit'] += profit_amount  # –û–±–Ω–æ–≤–ª—è–µ–º –æ–±—â–∏–π –¥–æ—Ö–æ–¥
        save_config({"user_profiles": user_profiles})  # –°–æ—Ö—Ä–∞–Ω—è–µ–º –æ–±–Ω–æ–≤–ª–µ–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ
        bot.send_message(
            message.chat.id,
            f"–í–∞—à –æ–±—â–∏–π –¥–æ—Ö–æ–¥ –æ–±–Ω–æ–≤–ª–µ–Ω –Ω–∞ {profit_amount} —Ä—É–±.",
            reply_markup=main_menu_keyboard()
        )
    except ValueError:
        bot.send_message(message.chat.id, "–û—à–∏–±–∫–∞. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ —Ñ–æ—Ä–º–∞—Ç '–û–±–Ω–æ–≤–∏—Ç—å –ø—Ä–∏–±—ã–ª—å <—Å—É–º–º–∞>'.")

if __name__ == "__main__":
    try:
        bot.polling(none_stop=True)
    except Exception as e:
        print(f"–û—à–∏–±–∫–∞: {e}")
